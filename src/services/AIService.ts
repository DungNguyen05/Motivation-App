// Import API key from environment
import { MotivationCategory } from '../types';

const GEMINI_API_KEY = process.env.EXPO_PUBLIC_GEMINI_API_KEY || 'YOUR_FIXED_API_KEY_HERE';

export interface MotivationAnalysis {
  motivations: {
    message: string;
    scheduledTime: Date;
    category: MotivationCategory;
  }[];
  totalMotivations: number;
  strategy: string;
}

export class AIService {
  private baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

  constructor() {
    // No need for API key parameter, using fixed key
  }

  private async queryGemini(prompt: string): Promise<any> {
    try {
      const requestBody = {
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      };

      console.log('üöÄ Sending request to Google Gemini 2.0...');

      const response = await fetch(`${this.baseUrl}?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      console.log('üì° Response status:', response.status);

      if (!response.ok) {
        const errorData = await response.json();
        console.log('‚ùå Error Response:', JSON.stringify(errorData, null, 2));
        
        if (response.status === 400) {
          if (errorData.error?.message?.includes('API_KEY_INVALID')) {
            throw new Error('API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.');
          } else if (errorData.error?.message?.includes('quota')) {
            throw new Error('ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.');
          } else {
            throw new Error(`L·ªói API: ${errorData.error?.message || 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá'}`);
          }
        } else if (response.status === 429) {
          throw new Error('Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.');
        } else {
          throw new Error(`Y√™u c·∫ßu Gemini API th·∫•t b·∫°i: ${response.status} ${response.statusText}`);
        }
      }

      const result = await response.json();
      console.log('‚úÖ Gemini Response received');
      
      if (result.candidates && result.candidates.length > 0 && result.candidates[0].content) {
        const content = result.candidates[0].content.parts[0].text;
        console.log('‚úÖ Extracted Content:', content);
        return content;
      }
      
      console.log('‚ùå No valid content in response');
      throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini');
    } catch (error) {
      console.error('‚ùå Error calling Gemini API:', error);
      throw error;
    }
  }

  private parseTimeframe(timeframe: string): { days: number } {
    const lower = timeframe.toLowerCase();
    
    if (lower.includes('week') || lower.includes('tu·∫ßn')) {
      const weeks = parseInt(lower.match(/\d+/)?.[0] || '1');
      return { days: weeks * 7 };
    } else if (lower.includes('month') || lower.includes('th√°ng')) {
      const months = parseInt(lower.match(/\d+/)?.[0] || '1');
      return { days: months * 30 };
    } else if (lower.includes('year') || lower.includes('nƒÉm')) {
      const years = parseInt(lower.match(/\d+/)?.[0] || '1');
      return { days: years * 365 };
    } else {
      return { days: 30 }; // Default to 1 month
    }
  }

  async analyzeGoal(goal: string, timeframe: string): Promise<MotivationAnalysis> {
    try {
      const prompt = `T·∫°o k·∫ø ho·∫°ch ƒë·ªông l·ª±c cho m·ª•c ti√™u n√†y: "${goal}" trong th·ªùi gian ${timeframe}.

Tr·∫£ l·ªùi CH√çNH X√ÅC theo ƒë·ªãnh d·∫°ng JSON n√†y (kh√¥ng c√≥ vƒÉn b·∫£n kh√°c):

{
  "strategy": "Chi·∫øn l∆∞·ª£c c·ªßa b·∫°n ·ªü ƒë√¢y (100-200 t·ª´ b·∫±ng ti·∫øng Vi·ªát)",
  "motivations": [
    {
      "message": "L·ªùi nh·∫Øc ƒë·ªông l·ª±c c·ª• th·ªÉ b·∫±ng ti·∫øng Vi·ªát",
      "days_from_now": 1,
      "category": "Start"
    },
    {
      "message": "L·ªùi nh·∫Øc ƒë·ªông l·ª±c kh√°c",
      "days_from_now": 7,
      "category": "Daily"
    }
  ]
}

T·∫°o 8-15 l·ªùi nh·∫Øc ƒë·ªông l·ª±c. S·ª≠ d·ª•ng c√°c danh m·ª•c: Start, Daily, Weekly Review, Motivation, Completion.
M·ªói l·ªùi nh·∫Øc ph·∫£i c·ª• th·ªÉ, truy·ªÅn c·∫£m h·ª©ng v√† ph√π h·ª£p v·ªõi m·ª•c ti√™u "${goal}".
Vi·∫øt t·∫•t c·∫£ b·∫±ng ti·∫øng Vi·ªát, t√≠ch c·ª±c v√† ƒë·ªông l·ª±c.`;

      console.log('üéØ Analyzing Goal with Gemini 2.0:', goal);
      
      const aiResponse = await this.queryGemini(prompt);

      // Try to parse JSON response
      let parsedResponse;
      try {
        // Look for JSON in the response
        const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const cleanResponse = jsonMatch[0];
          console.log('üßπ Cleaned JSON:', cleanResponse);
          parsedResponse = JSON.parse(cleanResponse);
        } else {
          console.log('‚ùå No JSON found in response');
          throw new Error('Kh√¥ng t√¨m th·∫•y JSON trong ph·∫£n h·ªìi AI');
        }
      } catch (parseError) {
        console.log('‚ùå Failed to parse JSON:', parseError);
        
        // Fallback: create motivations from text response
        return this.createFallbackMotivations(goal, timeframe);
      }

      // Validate response
      if (!parsedResponse.strategy || !parsedResponse.motivations || !Array.isArray(parsedResponse.motivations)) {
        console.log('‚ùå Invalid response structure:', parsedResponse);
        return this.createFallbackMotivations(goal, timeframe);
      }

      // Convert to our format
      const now = new Date();
      const motivations = parsedResponse.motivations.map((motivation: any) => {
        const daysFromNow = parseInt(motivation.days_from_now) || 1;
        const scheduledTime = new Date(now.getTime() + daysFromNow * 24 * 60 * 60 * 1000);
        
        // Set times based on category
        switch (motivation.category) {
          case 'Start':
            scheduledTime.setHours(9, 0, 0, 0);
            break;
          case 'Daily':
            scheduledTime.setHours(8, 0, 0, 0);
            break;
          case 'Weekly Review':
            scheduledTime.setHours(10, 0, 0, 0);
            break;
          case 'Motivation':
            scheduledTime.setHours(20, 0, 0, 0);
            break;
          case 'Completion':
            scheduledTime.setHours(18, 0, 0, 0);
            break;
          default:
            scheduledTime.setHours(12, 0, 0, 0);
        }

        return {
          message: motivation.message || `H√£y l√†m vi·ªác cho m·ª•c ti√™u: ${goal}`,
          scheduledTime,
          category: (motivation.category || 'Motivation') as MotivationCategory
        };
      });

      console.log('‚úÖ Successfully parsed AI response:', {
        strategy: parsedResponse.strategy.substring(0, 50) + '...',
        motivationCount: motivations.length
      });

      return {
        motivations,
        totalMotivations: motivations.length,
        strategy: parsedResponse.strategy,
      };

    } catch (error) {
      console.error('‚ùå Error in analyzeGoal:', error);
      
      // Fallback to basic motivations if AI fails
      return this.createFallbackMotivations(goal, timeframe);
    }
  }

  private createFallbackMotivations(goal: string, timeframe: string): MotivationAnalysis {
    console.log('üîÑ Creating fallback motivations for:', goal);
    
    const now = new Date();
    const { days } = this.parseTimeframe(timeframe);
    
    const motivationTemplates = [
      { message: `üöÄ B·∫Øt ƒë·∫ßu h√†nh tr√¨nh chinh ph·ª•c m·ª•c ti√™u: ${goal}!`, days: 0, category: 'Start' as MotivationCategory, hour: 9 },
      { message: `üí™ H√¥m nay l√† ng√†y tuy·ªát v·ªùi ƒë·ªÉ ti·∫øn g·∫ßn h∆°n ƒë·∫øn m·ª•c ti√™u: ${goal}`, days: 1, category: 'Daily' as MotivationCategory, hour: 8 },
      { message: `‚≠ê B·∫°n ƒëang l√†m r·∫•t t·ªët! Ti·∫øp t·ª•c ph·∫•n ƒë·∫•u cho ${goal}`, days: 3, category: 'Motivation' as MotivationCategory, hour: 20 },
      { message: `üìä ƒê√£ 1 tu·∫ßn r·ªìi! H√£y ƒë√°nh gi√° ti·∫øn ƒë·ªô m·ª•c ti√™u: ${goal}`, days: 7, category: 'Weekly Review' as MotivationCategory, hour: 10 },
      { message: `üî• ƒê·ª´ng b·ªè cu·ªôc! ${goal} ƒëang ch·ªù b·∫°n chinh ph·ª•c`, days: 10, category: 'Motivation' as MotivationCategory, hour: 19 },
      { message: `üåü M·ªói b∆∞·ªõc nh·ªè ƒë·ªÅu quan tr·ªçng cho m·ª•c ti√™u: ${goal}`, days: 14, category: 'Daily' as MotivationCategory, hour: 8 },
      { message: `üíé B·∫°n ƒë√£ ti·∫øn b·ªô r·∫•t nhi·ªÅu r·ªìi! Ti·∫øp t·ª•c cho ${goal}`, days: 21, category: 'Motivation' as MotivationCategory, hour: 20 },
      { message: `üèÜ S·∫Øp ho√†n th√†nh r·ªìi! ${goal} ƒëang r·∫•t g·∫ßn`, days: Math.floor(days * 0.8), category: 'Completion' as MotivationCategory, hour: 18 },
    ];

    const motivations = motivationTemplates
      .filter(template => template.days <= days)
      .map(template => {
        const scheduledTime = new Date(now.getTime() + template.days * 24 * 60 * 60 * 1000);
        scheduledTime.setHours(template.hour, 0, 0, 0);
        
        return {
          message: template.message,
          scheduledTime,
          category: template.category
        };
      });

    return {
      motivations,
      totalMotivations: motivations.length,
      strategy: `K·∫ø ho·∫°ch ƒë·ªông l·ª±c cho m·ª•c ti√™u "${goal}" trong ${timeframe}. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c nh·ªØng l·ªùi nh·∫Øc t√≠ch c·ª±c ƒë·ªÉ duy tr√¨ ƒë·ªông l·ª±c v√† theo d√µi ti·∫øn ƒë·ªô h√†ng ng√†y.`,
    };
  }

  // Test Gemini connection (no longer needed for users, but kept for debugging)
  async testConnection(): Promise<boolean> {
    try {
      console.log('üß™ Testing Gemini 2.0 API connection...');
      
      const result = await this.queryGemini('Xin ch√†o, vui l√≤ng tr·∫£ l·ªùi "K·∫øt n·ªëi th√†nh c√¥ng" ƒë·ªÉ ki·ªÉm tra API.');
      console.log('üß™ Test result:', result);
      
      const isSuccessful = result && result.length > 0;
      console.log('üß™ Connection test:', isSuccessful ? '‚úÖ PASSED' : '‚ùå FAILED');
      
      return isSuccessful;
    } catch (error) {
      console.error('üß™ API test failed:', error);
      return false;
    }
  }
}